{
  "name": "smart-time-ago",
  "description": "a simple lib to update the relative time on your page",
  "version": "0.1.5",
  "keywords": [
    "timeago",
    "relative",
    "time"
  ],
  "author": {
    "name": "poshboytl"
  },
  "homepage": "https://pragmatic.ly/",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pragmaticly/smart-time-ago/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/pragmaticly/smart-time-ago.git"
  },
  "dependencies": {
    "jquery": "*"
  },
  "main": "./index.js",
  "readme": "Smart Time Ago\n======================\n\nSmart Time Ago is a little jQuery library to update the relative timestamps in your document intelligently. (e.g \"3 hours ago\").\n\nIt's originally built for https://pragmatic.ly/. \n\nIt's inspired by another jQuery plugin http://timeago.yarp.com/ but give more flexibility and more intelligently.\n\nInstallation\n------------\n\nYou can use it as a jQuery plugin. \n\n    Just copy the lib/timeago.js or src/timeago.coffee to your project folder then load it after jQuery.\n\nOr if you use node, you can install it from npm.\n  \n    $ npm install -g smart-time-ago\n\nWhy Smart?\n-------------\n\nSmart Time Ago will check and update the relative time every 60000 millisecond (60 seconds) in the scope you specify at the beginning. Latter it will check the newest time in your scope then tune the checking time interval to a proper value. \n\nFor example, if the newest time in the scope you specify is '2 hours ago'. There is no need to check and update the relative time every 60 seconds. Instead, Smart Time Ago will automaticly make the checking time interval longer to 30 minutes.\n\nRules:\n  \n  The newest time is less than 44 minutes, the checking time interval will set to 1 minute.\n\n  The newest time is between 44 and 89 minutes, the checking time interval will set to 22 minutes.\n\n  The newest time is between 90 minutes and 42 hours, the checking time interval will set to 30 minutes.\n\n  The newest time is more than 42 hours, the checking time interval will set to half day.\n\nUsage\n------------\n\nBy default Smart Time Ago will keep watching on the time elements with a class of timeago and a ISO8601 timestamp in datatime attribute:\n\n    <time class=\"timeago\" datetime=\"2012-07-18T07:51:50Z\">about 8 hours ago</time>\n    \nYou can initialize the smart-time-ago in global like:\n\n    $('body').timeago();\n    \nIt will watch all your relative time elements by only one TimeAgo instance.\n\nOr you can use it in a specify scope like.\n   \n    <div class=\"timeLables\">\n     <time class=\"timeago\" datetime=\"2012-07-18T07:51:50Z\">about 8 hours ago</time>\n     <time class=\"timeago\" datetime=\"2012-07-18T06:51:50Z\">about 9 hours ago</time>\n    </div>\n    \n    $('.timeLables').timeago();\n \nIt will create one TimeAgo instance to update the time elements in the div with timeLables class.\n\nHowever you can also create TimeAgo instance for every time element separately like:\n\n    $('.timeago').timeago();\n\nBTW if you need dynamic add the time element to your document without refreshing the page or you want to refresh the timeago manually. You might need call the refresh function to refresh the instance like:\n\n    $('.timeago').timeago('refresh');\n\n    \nConfiguration\n--------------\n\nThere are some default configuration in Smart Time Ago:\n\n    $.fn.timeago.defaults = {\n      selector: 'time.timeago',\n      attr: 'datetime',\n      dir: 'up',\n      suffix: 'ago'\n    };\n    \nThe 'time.timeago' is the default selector to watch and update.\n\nThe 'datetime' is the default attribute to put the ISO8601 absolute time to parse.\n\nThe 'up' in dir means the elements in your scope is display by time desc. which means if the dir sets to 'up'. Smart Time Ago will treat the first element's time as the newest time to adjust the time interval. Oppositely if it set to 'down', Smart Time Ago will treat the last element's time as the newewst time.\n\n\nThe 'ago' in 'suffix' means the relative generated by Smart Time Ago will look like '3 hours ago'.\nIf you want the text looks like '3 hours from now', you might need change the 'suffix' to 'from now'.\n\nYou can change the default configurations by passing the options to\ntimeago function when initialize timeago like:\n\n    $('.timeago').timeago({selector: 'span.timeago', attr: 'title', dir: 'down', suffix: 'from now'})\n\n\nGem for Rails\n-------------\nThanks [ashchan](https://github.com/ashchan) for writing the ruby gem:\n[timeago-rails](https://github.com/ashchan/timeago-rails)\n\nIf you wanna running Smart Time Ago in Rails, please do check it out. \n\nTODO\n-----\n\nThanks very much if you could contribute.\n\n\nCredits\n-------\n\n![pragmatic.ly](https://pragmatic.ly/assets/vlogo.png)\n\nSmart Time Ago is maintained and funded by [Pragmatic.ly](https://pragmatic.ly/ \"Pragmatic.ly\").\n\nThanks to all the contributors.\n\nSpecial thanks to [unRob](https://github.com/unRob) for the i18n support.\n\nCopyright (c) 2012 Terry Tai, Pragmatic.ly (terry@pragmatic.ly, https://pragmatic.ly/)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pragmaticly/smart-time-ago/issues"
  },
  "_id": "smart-time-ago@0.1.5",
  "dist": {
    "shasum": "cb5a8efaa365b8a94b86e1ef3199ba560ae99f9f"
  },
  "_from": "smart-time-ago@latest",
  "_resolved": "https://registry.npmjs.org/smart-time-ago/-/smart-time-ago-0.1.5.tgz"
}
